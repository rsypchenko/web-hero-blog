---
import { readAll } from "../lib/markdoc/read";
import { blog } from "../lib/markdoc/frontmatter.schema";
import Card from "./Card.astro";

const { tags, slug } = Astro.props;

const tagsMap = tags.reduce((acc, next) => {
  return {
    ...acc,
    [next]: true,
  };
}, {});

const posts = await readAll({
  directory: "blog",
  frontmatterSchema: blog,
});

const sortedPosts = posts
  .filter((p) => {
    return p.frontmatter.draft === false && p.frontmatter.tags.some((tag) => tagsMap[tag] && p.slug !== slug);
  })
  .slice(0, 4);
const recommenedPosts = posts
  .filter((p) => {
    return p.frontmatter.draft === false && p.frontmatter.popular === true && !sortedPosts.includes(p);
  })
  .slice(0, 4);
const renderPosts = sortedPosts.concat(recommenedPosts).slice(0, 4);
--- 

<section class="flex flex-col mt-12 border-t">
  <p class="text-2xl text-center">Read More</p>
  <div
    class="grid sm:grid-cols-2 gap-4"
  >
    {
      renderPosts.map((post) => {
        return <Card post={post} />;
      })
    }
  </div>
</section>

<script is:inline>
  var lazyImages = [].slice.call(
    document.querySelectorAll(".lazy-loaded-image.lazy")
  );
  let lazyImageObserver = new IntersectionObserver(function (
    entries,
    observer
  ) {
    entries.forEach(function (entry) {
      if (entry.isIntersecting) {
        let lazyImage = entry.target;
        lazyImage.src = lazyImage.dataset.src;
        lazyImage.classList.remove("lazy");
        lazyImage.classList.add("loaded");
        lazyImageObserver.unobserve(lazyImage);
      }
    });
  });
  lazyImages.forEach(function (lazyImage) {
    lazyImageObserver.observe(lazyImage);
  });
</script>