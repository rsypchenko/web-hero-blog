---
import { readAll } from "../lib/markdoc/read";
import { blog } from "../lib/markdoc/frontmatter.schema";
import PageLayout from "../layouts/PageLayout.astro";
import PageMeta from "../components/PageMeta.astro";
import { SITE_TITLE } from "../config";
import BlogItem from "../components/BlogItem.astro";

const posts = await readAll({
  directory: "blog",
  frontmatterSchema: blog,
});

const sortedPosts = posts
  .filter((p) => p.frontmatter.draft !== true)
  .sort(
    (a, b) =>
      new Date(b.frontmatter.date).valueOf() -
      new Date(a.frontmatter.date).valueOf()
  );
---

<PageLayout>
  <PageMeta title={`Blog | ${SITE_TITLE}`} slot="meta" />
  <section slot="main">
    <ul>
      {
        sortedPosts.map((post) => {
          const formattedDate = new Date(
            post.frontmatter.date
          ).toLocaleDateString("en-us", {
            year: "numeric",
            month: "short",
            day: "numeric",
          });
          return (
            <BlogItem
              client:load
              post={post}
              date={formattedDate}
            />
          );
        })
      }
    </ul>
  </section>
</PageLayout>


<script is:inline>
  var lazyImages = [].slice.call(document.querySelectorAll(".lazy-loaded-image.lazy"));
  let lazyImageObserver = new IntersectionObserver(function(entries, observer) {
      entries.forEach(function(entry) {
          if (entry.isIntersecting) {
              let lazyImage = entry.target;
              lazyImage.src = lazyImage.dataset.src;
              lazyImage.classList.remove("lazy");
              lazyImage.classList.add("loaded");
              lazyImageObserver.unobserve(lazyImage);
          }
      });
  });
  lazyImages.forEach(function(lazyImage) {
      lazyImageObserver.observe(lazyImage);
  });
  </script>