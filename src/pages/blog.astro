---
import PageLayout from "../layouts/PageLayout.astro";
import PageMeta from "../components/PageMeta.astro";
import { SITE_TITLE } from "../config";
import BlogItem from "../components/BlogItem.astro";
import fetchApi from "../lib/strapi";
import type Article from "../interfaces/article";

const articles = await fetchApi<Article[]>({
  endpoint: "articles",
  wrappedByKey: "data",
  query: {
    sort: {
      created: 'desc'
    }
  },
});
---

<PageLayout>
  <PageMeta title={`Blog | ${SITE_TITLE}`} slot="meta" />
  <section class="max-w-4xl mx-auto" slot="main">
    <div class="flex justify-center">
      <ul class="mt-10">
        {
          articles.map((post) => {
            const formattedDate = new Date(
              post.attributes.createdAt
            ).toLocaleDateString("en-us", {
              year: "numeric",
              month: "short",
              day: "numeric",
            });
            return <BlogItem post={post} date={formattedDate} />;
          })
        }
      </ul>
    </div>
  </section>
</PageLayout>

<script is:inline>
  var lazyImages = [].slice.call(
    document.querySelectorAll(".lazy-loaded-image.lazy")
  );
  let lazyImageObserver = new IntersectionObserver(function (
    entries,
    observer
  ) {
    entries.forEach(function (entry) {
      if (entry.isIntersecting) {
        let lazyImage = entry.target;
        lazyImage.src = lazyImage.dataset.src;
        lazyImage.classList.remove("lazy");
        lazyImage.classList.add("loaded");
        lazyImageObserver.unobserve(lazyImage);
      }
    });
  });
  lazyImages.forEach(function (lazyImage) {
    lazyImageObserver.observe(lazyImage);
  });
</script>
